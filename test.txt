import base64
exec(base64.b64decode('''ZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZSwgQmFjaywgU3R5bGUKaW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IGNvbG9yYW1hCmltcG9ydCB0aW1lCmltcG9ydCBzdWJwcm9jZXNzCgp0aW1lLnNsZWVwKDIpCnByaW50KEZvcmUuR1JFRU4gKyAiQ2hlY2sgZm9yIHVwZGF0ZXMuLi4iKQp0aW1lLnNsZWVwKDYpCm9zLnN5c3RlbSgicHl0aG9uIHVwZGF0ZS5weSIpCgpkZWYgY2xlYXIoKToKICAgICIiIkNsZWFyIGNvbnNvbGUgc2NyZWVuLiIiIgogICAgc3lzLnN0ZG91dC53cml0ZSgiXDAzM1tIXDAzM1tKIikKICAgIHN5cy5zdGRvdXQuZmx1c2goKQoKZGVmIGRpc3BsYXlfbWVudSgpOgogICAgIiIiRGlzcGxheSBtZW51IG9wdGlvbnMuIiIiCiAgICBjbGVhcigpCiAgICBwcmludChCYWNrLllFTExPVyArIFN0eWxlLkJSSUdIVCArICItLS0tIE1lbnUgLS0tLSIpCiAgICBwcmludChCYWNrLkdSRUVOICsgIlsxXSBTdGFydGVkIFN5c3RlbSIpCiAgICBwcmludCgiWzJdIEVuY3J5cHQvRGVjcnlwdCBmaWxlIikKICAgIHByaW50KCJbM10gTW9yZSBJbmZvcm1hdGlvbiIpCiAgICBwcmludCgiWzRdIENoZWNrIGVycm9yIikKICAgIHByaW50KCJbNV0gRkFRIikKICAgIHByaW50KCJbMF0gRXhpdCIpCiAgICBwcmludCgpCiAgICBwcmludCgpCiAgICBwcmludChCYWNrLlJFRCArICJOT1RFOiBJZiBzeXN0ZW0gZ290IGVycm9yLCBwbGVhc2UgdHJ5IHRvIGluc3RhbGwgYWxsIG1vZHVsZSIpCiAgICBwcmludCgpCiAgICBwcmludCgpCiAgICBwcmludChGb3JlLkJMVUUgKyBTdHlsZS5CUklHSFQgKyAiVGhpcyB0b29sIGlzIGEgcGFpZCB0b29sIHRoYXQgY2FuIGN1cnJlbnRseSBiZSBmb3VuZCBpbiBvcHRpb25zIFszXSIpCiAgICBwcmludChTdHlsZS5SRVNFVF9BTEwpCgpkZWYgb3B0aW9uMSgpOgogICAgIiIiQWN0aW9uIGZvciBPcHRpb24gMS4iIiIKICAgIHByaW50KEZvcmUuR1JFRU4gKyAiU3RhcnRpbmcgc3lzdGVtLi4uIikKICAgIHRpbWUuc2xlZXAoMikKICAgIHByaW50KEZvcmUuR1JFRU4gKyAiQ2hlY2sgaWYgdGhlIGZpbGUgaXMgbWlzc2luZy4iKQogICAgdGltZS5zbGVlcCgyKQogICAgZGVmIGNoZWNrX2ZpbGUoZmlsZV9wYXRoKToKICAgICAgaWYgb3MucGF0aC5pc2ZpbGUoZmlsZV9wYXRoKToKICAgICAgICAgIHByaW50KGYiRmlsZSB7ZmlsZV9wYXRofSBleGlzdC4iKQogICAgICBlbHNlOgogICAgICAgICAgcHJpbnQoZiJGaWxlIHtmaWxlX3BhdGh9IGRvZXMgbm90IGV4aXN0LiIpCiAgICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgICBwcmludChGb3JlLlJFRCArICJDbG9zaW5nIHN5c3RlbS4uLiBbM10iKQogICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAiQ2xvc2luZyBzeXN0ZW0uLi4gWzJdIikKICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgIkNsb3Npbmcgc3lzdGVtLi4uIFsxXSIpCiAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAKICAgIGNoZWNrX2ZpbGUoInN5c3RlbS5weSIpCiAgICBvcy5zeXN0ZW0oInB5dGhvbiBzeXN0ZW0ucHkiKQoKZGVmIG9wdGlvbjIoKToKICAgICIiIkFjdGlvbiBmb3IgT3B0aW9uIDIuIiIiCiAgICBwcmludCgiSWYgeW91IGdvdCBlcnJvciBwbGVhc2UgcnVuICdDaG9pY2UgNCcuIikKICAgIHRpbWUuc2xlZXAoMykKICAgIHByaW50KEZvcmUuQ1lBTiArICJFbmNyeXB0L0RlY3J5cHQgRmlsZSIpCiAgICBwcmludCgpCiAgICBwcmludChGb3JlLkNZQU4gKyAiWzFdIEVuY3J5cHQgRmlsZSIpCiAgICBwcmludChGb3JlLkNZQU4gKyAiWzJdIERlY3J5cHQgRmlsZSIpCiAgICBwcmludCgpCiAgICBwcmludChGb3JlLlJFRCArICJOT1RFOiBIYXZpbmcgZXJyb3JzIGluIG9wdGlvbnMgMSBhbmQgMiwgcGxlYXNlIHNlbGVjdCBvcHRpb24gMyB0byBlbmNvZGUgYW5kIGRlY29kZSBhbmQgd2FpdCBmb3IgdXMgdG8gZml4IGl0LiIpCiAgICBwcmludCgpCiAgICBudW1iZXIgPSBpbnQoaW5wdXQoIkVudGVyIGNob2ljZTogIikpCgogICAgaWYgbnVtYmVyID09IDE6CiAgICAgICAgcHJpbnQoIlJ1bm5pbmcgRmlsZS4uLiIpCiAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgIHN1YnByb2Nlc3MucnVuKFsicHl0aG9uIiwgImVuY3J5cHQucHkiXSkKICAgIGVsaWYgbnVtYmVyID09IDI6CiAgICAgIHByaW50KCJSdW5uaW5nIEZpbGUuLi4iKQogICAgICB0aW1lLnNsZWVwKDIpCiAgICAgIHN1YnByb2Nlc3MucnVuKFsicHl0aG9uIiwgImRlY3J5cHQucHkiXSkKICAgICAgcGFzcwpkZWYgb3B0aW9uMygpOgogICAgcHJpbnQoU3R5bGUuQlJJR0hUICsgIkRpc2NvcmQ6IGRpc2NvcmQuZ2cvOUNQNjdRZkVhZiIpCiAgICBwcmludChTdHlsZS5CUklHSFQgKyAiT3duZXI6IG9rYXNoaW5hX21pa28iKQogICAgcHJpbnQoU3R5bGUuQlJJR0hUICsgIlZlcnNpb246IDEuMC4xIikKICAgIHByaW50KFN0eWxlLkJSSUdIVCArICJMYW5ndWFnZTogUHl0aG9uIikKICAgIHByaW50KFN0eWxlLkJSSUdIVCArICJXYW50IG1vcmUgaW5mb21hdGlvbj8gSm9pbiBteSBkaXNjb3JkIHNlcnZlciBmb3IgbW9yZSBoZWxwIHRoaXMgdG9vbCA7KSIpCiAgICB0aW1lLnNsZWVwKDEwKQogICAgcHJpbnQoRm9yZS5SRUQgKyAiQ2xvc2luZyBhZnRlciAxMHMiKQpkZWYgb3B0aW9uNCgpOgogIHByaW50KEZvcmUuR1JFRU4gKyAiQ2hlY2sgaWYgdGhlIGZpbGUgaXMgbWlzc2luZy4iKQogIHRpbWUuc2xlZXAoMikKICBkZWYgY2hlY2tfZmlsZShmaWxlX3BhdGgpOgogICAgaWYgb3MucGF0aC5pc2ZpbGUoZmlsZV9wYXRoKToKICAgICAgICBwcmludChmIkZpbGUge2ZpbGVfcGF0aH0gZXhpc3QuIikKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoZiJGaWxlIHtmaWxlX3BhdGh9IGRvZXMgbm90IGV4aXN0LiIpCiAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgIHByaW50KEZvcmUuUkVEICsgIkNsb3Npbmcgc3lzdGVtLi4uIFszXSIpCiAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgIHByaW50KEZvcmUuUkVEICsgIkNsb3Npbmcgc3lzdGVtLi4uIFsyXSIpCiAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgIHByaW50KEZvcmUuUkVEICsgIkNsb3Npbmcgc3lzdGVtLi4uIFsxXSIpCiAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgIHN5cy5leGl0KCkKICBjaGVja19maWxlKCJzeXN0ZW0ucHkiKQogIHRpbWUuc2xlZXAoMikKICBjaGVja19maWxlKCJlbmNyeXB0LnB5IikKICB0aW1lLnNsZWVwKDIpCiAgY2hlY2tfZmlsZSgiZGVjcnlwdC5weSIpCiAgdGltZS5zbGVlcCgyKQogIGNoZWNrX2ZpbGUoInVwZGF0ZS5weSIpCiAgcHJpbnQoQmFjay5HUkVFTiArICJDaGVjayBjb21wbHRlISBTdGFydGluZyBmaWxlLi4uIikKICB0aW1lLnNsZWVwKDMpCiAgb3Muc3lzdGVtKCJweXRob24gbWFpbi5weSIpCmRlZiBvcHRpb241KCk6CiAgcHJpbnQoRm9yZS5HUkVFTiArICJHbyB0byB0aGlzIGxpbmsgdG8gc2VlIEZBUTogaHR0cHM6Ly9wYXN0ZWJpbi5jb20vWmZKZUdhaTEiKQogIHByaW50KCJDbG9zaW5nIGFmdGVyIDEwcyIpCiAgdGltZS5zbGVlcCgxMCkKZGVmIG1haW4oKToKICAgICIiIk1haW4gZnVuY3Rpb24gdG8gZGlzcGxheSBtZW51IGFuZCBoYW5kbGUgdXNlciBpbnB1dC4iIiIgICMgSW5pdGlhbGl6ZSBDb2xvcmFtYQogICAgd2hpbGUgVHJ1ZToKICAgICAgICBkaXNwbGF5X21lbnUoKQogICAgICAgIGNob2ljZSA9IGlucHV0KEJhY2suQ1lBTiArICJFbnRlciB5b3VyIGNob2ljZTogIikKCiAgICAgICAgaWYgY2hvaWNlID09ICcxJzoKICAgICAgICAgICAgb3B0aW9uMSgpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gJzInOgogICAgICAgICAgICBvcHRpb24yKCkKICAgICAgICBlbGlmIGNob2ljZSA9PSAnMyc6CiAgICAgICAgICAgIG9wdGlvbjMoKQogICAgICAgIGVsaWYgY2hvaWNlID09ICc0JzoKICAgICAgICAgICAgb3B0aW9uNCgpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gJzUnOgogICAgICAgICAgICBvcHRpb241KCkKICAgICAgICAKICAgICAgICBlbGlmIGNob2ljZSA9PSAnMCc6CiAgICAgICAgICAgIHByaW50KEJhY2suUkVEICsgIkV4aXRpbmcuLi4iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KEJhY2suUkVEICsgIkludmFsaWQgY2hvaWNlISBQbGVhc2UgZW50ZXIgYSB2YWxpZCBvcHRpb24uIikKICAgICAgICAgICAgaW5wdXQoQmFjay5HUkVFTiArICJQcmVzcyBFbnRlciB0byBjb250aW51ZS4uLiIpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigp'''))
